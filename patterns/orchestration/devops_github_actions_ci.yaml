plse_version: "2.0"
pattern_id: "orchestration.devops.github_actions_ci"

metadata:
  author: "PLSE v2.0 Orchestration Library"
  description: |
    Generates a production-grade Continuous Integration (CI) workflow file for
    GitHub Actions. This pattern teaches the LLM the structure of a CI pipeline
    for a Python project, including key concepts like job triggers, build matrices
    for multi-version testing, dependency caching for speed, and distinct steps
    for linting and testing.
  tags: [orchestration, devops, ci-cd, github-actions, testing, automation, best-practice]
  pedagogy:
    concept: "Automated Testing with a GitHub Actions CI Pipeline"
    difficulty: "expert"

instruction: "Write a complete GitHub Actions workflow file (`ci.yml`) for a Python project. The workflow should trigger on pushes and pull requests to the `main` branch. It must run jobs on both Linux and Windows, and test against multiple Python versions (`{{ python_version_1 }}`, `{{ python_version_2 }}`). The pipeline should include steps for installing dependencies, linting with `ruff`, and running tests with `pytest`."

parameters:
  workflow_name:
    type: "string"
    description: "The name of the GitHub Actions workflow."
    default: "Python CI"
  python_version_1:
    type: "string"
    description: "The first Python version to test against."
    default: "3.9"
  python_version_2:
    type: "string"
    description: "The second Python version to test against."
    default: "3.11"

requires: []

components:
  model_definition: |
    name: {{ workflow_name }}

    on:
      push:
        branches: [ "main" ]
      pull_request:
        branches: [ "main" ]

    jobs:
      build:
        strategy:
          matrix:
            os: [ubuntu-latest, windows-latest]
            python-version: ["{{ python_version_1 }}", "{{ python_version_2 }}"]

        {% raw %}runs-on: ${{ matrix.os }}{% endraw %}

        steps:
        - name: Checkout repository
          uses: actions/checkout@v4

        - name: Set up Python {% raw %}${{ matrix.python-version }}{% endraw %}
          uses: actions/setup-python@v5
          with:
            python-version: {% raw %}${{ matrix.python-version }}{% endraw %}

        - name: Cache pip dependencies
          uses: actions/cache@v4
          with:
            path: ~/.cache/pip
            key: {% raw %}${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}{% endraw %}
            restore-keys: |
              {% raw %}${{ runner.os }}-pip-{% endraw %}

        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            pip install -e .[dev]

        - name: Lint with ruff
          run: |
            ruff check .

        - name: Test with pytest
          run: |
            pytest

validation:
  linter_checks: false
  unit_test_snippets:
    - |
      import yaml
      try:
          workflow_data = yaml.safe_load('''{{ __raw_code__ }}''')
          assert 'on' in workflow_data
          assert 'jobs' in workflow_data
          assert 'build' in workflow_data['jobs']
          steps = workflow_data['jobs']['build']['steps']
          step_names = [step.get('name', '') for step in steps]
          assert "Checkout repository" in step_names
          assert "Install dependencies" in step_names
          assert "Test with pytest" in step_names
          print("Orchestration pattern validation passed: GitHub Actions workflow is structurally sound.")
      except yaml.YAMLError as e:
          raise AssertionError(f"Generated content is not valid YAML: {e}") from e
