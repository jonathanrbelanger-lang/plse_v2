plse_version: "2.0"
pattern_id: "python.visualization.seaborn_errorbar_plot"

metadata:
  author: "PLSE v2.0 Core Library (from JANUS.ipynb)"
  description: |
    Demonstrates how to create a publication-quality comparative line plot from
    a pandas DataFrame. This pattern aggregates experimental data (calculating mean
    and standard deviation) and visualizes it with error bands using Seaborn
    and Matplotlib for clear, statistical reporting.
  tags: [python, visualization, matplotlib, seaborn, pandas, data-analysis, reporting]
  pedagogy:
    concept: "Statistical Results Visualization"
    difficulty: "intermediate"

instruction: "Using pandas, seaborn, and matplotlib, create a comparative line plot from a DataFrame named `{{ df_var_name }}`. The plot should show the mean `{{ y_col }}` for each `{{ group_col }}` against the `{{ x_col }}`, with shaded error bands representing the standard deviation."

parameters:
  df_var_name:
    type: "choice"
    description: "The variable name for the pandas DataFrame."
    default: "results_df"
    constraints:
      options: ["results_df", "experiment_data", "summary_df"]
  x_col:
    type: "choice"
    description: "The column name for the X-axis."
    default: "noise_level"
    constraints:
      options: ["noise_level", "epoch", "step"]
  y_col:
    type: "choice"
    description: "The column name for the Y-axis (the metric)."
    default: "accuracy"
    constraints:
      options: ["accuracy", "loss", "score"]
  group_col:
    type: "choice"
    description: "The column to group by for different lines on the plot."
    default: "model_type"
    constraints:
      options: ["model_type", "config_name", "group"]

requires:
  - "pandas as pd"
  - "seaborn as sns"
  - "matplotlib.pyplot as plt"
  - "os"

template: |
  # --- 1. Create Sample Data ---
  # In a real scenario, this DataFrame would be loaded from a CSV or generated by an experiment.
  data = {
      "{{ group_col }}": ["Model A"]*15 + ["Model B"]*15,
      "{{ x_col }}": list(range(5))*3 + list(range(5))*3,
      "run": [1]*5 + [2]*5 + [3]*5 + [1]*5 + [2]*5 + [3]*5,
      "{{ y_col }}": (
          [0.9, 0.8, 0.7, 0.6, 0.5] + [0.92, 0.81, 0.73, 0.62, 0.51] + [0.88, 0.79, 0.68, 0.58, 0.49] +
          [0.95, 0.9, 0.85, 0.8, 0.75] + [0.96, 0.91, 0.86, 0.82, 0.76] + [0.94, 0.89, 0.84, 0.79, 0.74]
      )
  }
  {{ df_var_name }} = pd.DataFrame(data)

  # --- 2. Generate the Plot ---
  sns.set_theme(style="whitegrid")
  plt.figure(figsize=(10, 6))

  # Use seaborn's lineplot, which automatically aggregates data,
  # calculates the mean, and shows a confidence interval (or std dev).
  plot = sns.lineplot(
      data={{ df_var_name }},
      x="{{ x_col }}",
      y="{{ y_col }}",
      hue="{{ group_col }}",
      style="{{ group_col }}", # Use different line styles for clarity
      markers=True,
      dashes=False,
      errorbar="sd", # Show standard deviation as the error band
      linewidth=2.5
  )

  # --- 3. Add Professional Formatting ---
  plot.set_title("Model Performance Comparison", fontsize=16, weight='bold')
  plot.set_xlabel("{{ x_col | replace('_', ' ') | title }}", fontsize=12)
  plot.set_ylabel("{{ y_col | title }} (Mean & Std Dev)", fontsize=12)
  plot.legend(title="{{ group_col | title }}")
  plt.tight_layout()

  # --- 4. Save the Figure ---
  output_filename = "performance_comparison.png"
  plt.savefig(output_filename, dpi=300)
  print(f"Plot saved to {output_filename}")
  # plt.show() # In a script, you might save without showing

validation:
  linter_checks: true
  unit_test_snippets:
    - |
      # Test that the script runs and produces the output file.
      assert os.path.exists("performance_comparison.png"), "Plot file was not created."
      print("Visualization script validation passed.")
      # Clean up the generated file
      os.remove("performance_comparison.png")
